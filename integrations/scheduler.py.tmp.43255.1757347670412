#!/usr/bin/env python3
import json
import subprocess
import time
import sys

def load_config():
    """Load configuration from config.json"""
    try:
        with open("config.json", "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading config.json: {e}")
        sys.exit(1)

def convert_interval_to_seconds(interval):
    """Convert interval string to seconds"""
    if interval.endswith("min"):
        return int(interval[:-3]) * 60
    elif interval.endswith("hr") or interval.endswith("h"):
        return int(interval[:-2]) * 3600
    elif interval.endswith("d"):
        return int(interval[:-1]) * 86400
    else:
        print(f"Unknown interval format: {interval}")
        return 3600  # default to 1 hour

def run_predict(ticker):
    """Run the predict function from main.py"""
    try:
        cmd = ["python3", "../backend_&_algorithms/main.py", "predict", "--ticker", ticker]
        print(f"Running: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("Prediction completed successfully")
            if result.stdout:
                print(f"Output: {result.stdout.strip()}")
        else:
            print(f"Prediction failed: {result.stderr.strip()}")
            
    except subprocess.TimeoutExpired:
        print("Prediction timed out")
    except Exception as e:
        print(f"Error running prediction: {e}")

def main():
    """Main scheduler loop"""
    config = load_config()
    ticker = config["ticker"]
    interval = config["interval"]
    
    interval_seconds = convert_interval_to_seconds(interval)
    
    print(f"Starting scheduler for {ticker} every {interval} ({interval_seconds} seconds)")
    
    try:
        while True:
            run_predict(ticker)
            print(f"Waiting {interval} until next prediction...")
            time.sleep(interval_seconds)
            
    except KeyboardInterrupt:
        print("\nScheduler stopped")
        sys.exit(0)

if __name__ == "__main__":
    main()